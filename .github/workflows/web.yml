name: Web Application CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permissions to gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      # Check if PostgreSQL client is installed
      - name: Check PostgreSQL client installation
        id: check_postgresql
        run: |
          if dpkg -s postgresql-client &> /dev/null; then
            echo "::set-output name=installed::true"
          else
            echo "::set-output name=installed::false"
          fi

      # Install PostgreSQL client if not already installed
      - name: Install PostgreSQL Client
        if: ${{ steps.check_postgresql.outputs.installed != 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install postgresql-client -y

      - name: Set up PostgreSQL Client
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "SELECT * FROM public.users;"

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-userapi-image .

      - name: Push Docker image to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-userapi-image:latest

  deploy:
    needs: build
    runs-on: hyd-ap-south-2c
    steps:
      - name: Start self-hosted runner
        run: ./start-runner.sh || true
      - name: Pull Image from docker hub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-userapi-image:latest

      - name: Stop and remove existing container
        run: |
          sudo docker stop user-api-container || true
          sudo docker rm -f user-api-container || true

      - name: Run Docker container
        run: |
          sudo docker run -d -p 8080:8080 --name user-api-container ${{ secrets.DOCKER_USERNAME }}/my-userapi-image:latest